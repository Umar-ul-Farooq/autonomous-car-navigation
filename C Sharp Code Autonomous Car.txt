using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class RobotController : MonoBehaviour
{
    
    [SerializeField] private WheelCollider FLC;
    [SerializeField] private WheelCollider FRC;
    [SerializeField] private WheelCollider RLC;
    [SerializeField] private WheelCollider RRC;

    [SerializeField] private Transform FLT;
    [SerializeField] private Transform FRT;
    [SerializeField] private Transform RLT;
    [SerializeField] private Transform RRT;

    [SerializeField] private Transform FRS;
    [SerializeField] private Transform L1S;
    [SerializeField] private Transform L2S;
    [SerializeField] private Transform L3S;
    [SerializeField] private Transform R1S;
    [SerializeField] private Transform R2S;
    [SerializeField] private Transform R3S;
    [SerializeField] private Transform ORS;

    [SerializeField] private float maxSteeringAngle;
    [SerializeField] private float motorForce;
    [SerializeField] private float brakeForce;

    [SerializeField] private float angle_x;
    [SerializeField] private float angle_z;

    [SerializeField] private float velocity;
    private Rigidbody rb;


    private float steerAngle;
    private bool isBreaking;

    private float s1dst = 7;

    private float s2dst = 15;

    private float s3dst = 7;

    private void Start()
    {
        maxSteeringAngle = 45f;
           
        rb = GetComponent<Rigidbody>();

        float s1_x = -1; float s1_y = 7; float s1_z = 0;
        float s2_x = 6; float s2_y = 30; float s2_z = 0;
        float s3_x = 15; float s3_y = 85; float s3_z = 0;

        SensorAdjustment(FRS, 0, 0, 0);
        SensorAdjustment(L1S, s1_x, -s1_y, s1_z);
        SensorAdjustment(L2S, s2_x, -s2_y, s2_z);
        SensorAdjustment(L3S, s3_x, -s3_y, s3_z);
        SensorAdjustment(R1S, s1_x, s1_y, s1_z);
        SensorAdjustment(R2S, s2_x, s2_y, s2_z);
        SensorAdjustment(R3S, s3_x, s3_y, s3_z);
        SensorAdjustment(ORS, 50,180,0);
    }

    private void FixedUpdate()
    {  
        SpeedControl();
        TrackNavigation();
        UpdateWheels();
        ControlMotor();

        angle_x = ORS.eulerAngles.x;
        angle_z = ORS.eulerAngles.z;
        velocity = rb.velocity.magnitude;
    
    }

    private void SensorAdjustment(Transform sensor, float x_angle, float y_angle, float z_angle)
    {
        sensor.transform.Rotate(x_angle, y_angle, z_angle);
    }

    private void ControlMotor()
    {       
        FLC.motorTorque = motorForce;
        FRC.motorTorque = motorForce;
        RLC.motorTorque = motorForce;
        RRC.motorTorque = motorForce;
        
        brakeForce = isBreaking ? 3000f : 0f;
        FLC.brakeTorque = brakeForce;
        FRC.brakeTorque = brakeForce;
        RLC.brakeTorque = brakeForce;
        RRC.brakeTorque = brakeForce;
    }

    private bool sense(Transform sensor, float dist, string layer)
    {
        LayerMask mask = LayerMask.GetMask(layer);
        if (Physics.Raycast(sensor.position, sensor.TransformDirection(Vector3.forward),dist, mask))
        {
            Debug.DrawRay(sensor.position, sensor.TransformDirection(Vector3.forward) * dist, Color.yellow);
            return true;
        }
        else
        {
            Debug.DrawRay(sensor.position, sensor.TransformDirection(Vector3.forward) * dist, Color.white);
            return false;
        }    
    }


    private void TrackNavigation()
    {
        bool l1Obs = sense(L1S, s1dst, "Obs");
        bool r1Obs = sense(R1S, s1dst, "Obs");
        bool l2Obs = sense(L2S, 3, "Obs");
        bool r2Obs = sense(R2S, 3, "Obs");
        bool l3Obs = sense(L3S, 1, "Obs");
        bool r3Obs = sense(R3S, 1, "Obs");

        if (l1Obs || r1Obs || l2Obs || r2Obs || l3Obs || r3Obs)
        {
            if ((l1Obs && !r1Obs) || (l2Obs && !r2Obs) || (l3Obs && !r3Obs))
            {
                ControlSteering(1); 
            }
            else if ((!l1Obs && r1Obs) || (!l2Obs && r2Obs) || (!l3Obs && r3Obs))
            {
                ControlSteering(-1); 
            }
            else
            {
                ControlSteering(0);  
            }
            return; 
        }

        
        bool l3Road = sense(L3S, s3dst, "Road");
        bool r3Road = sense(R3S, s3dst, "Road");
        bool l2Road = sense(L2S, s2dst, "Road");
        bool r2Road = sense(R2S, s2dst, "Road");

        if ((!l3Road && r3Road) || (!l2Road && r2Road))
        {
            ControlSteering(1);  
        }
        else if ((l3Road && !r3Road) || (l2Road && !r2Road))
        {
            ControlSteering(-1); 
        }
        else
        {
            ControlSteering(0); 
        }
    }


    private void ControlSteering(float direction)
    {
        if(direction == 0)
        {
            steerAngle = 0;
        }

        else
        {
            steerAngle = maxSteeringAngle * direction;  
        }

            FLC.steerAngle = steerAngle;
            FRC.steerAngle = steerAngle;
    }

    private void UpdateWheels()
    {
        UpdateWheelPos(FLC, FLT);
        UpdateWheelPos(FRC, FRT);
        UpdateWheelPos(RLC, RLT);
        UpdateWheelPos(RRC, RRT);
    }

    private void UpdateWheelPos(WheelCollider wheelCollider, Transform trans)
    {
        Vector3 pos;
        Quaternion rot;
        wheelCollider.GetWorldPose(out pos, out rot);
        trans.rotation = rot;
        trans.position = pos;  
    }

    private void SpeedControl()
    {
        if (velocity < 2f)
        {
            motorForce = 800f; 
        }
        else if (velocity >= 5)
        {
            motorForce = 0f;
        }
        else if (velocity > 3)
        {
            motorForce = 100f; 
        }
        else
        {
            motorForce = 400f;
        }
    }
}